// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
        //X processing
        Mux16(a=x , b=false , sel=zx , out= OutZx);
        Not16(in=OutZx , out=notOutZx);
        Mux16(a=OutZx , b=notOutZx , sel=nx , out= OutNx);

        //Y processing
        Mux16(a=y , b=false , sel=zy , out= OutZy);
        Not16(in=OutZy , out=notOutZy);
        Mux16(a=OutZy , b=notOutZy , sel=ny , out= OutNy);

        //f
        // if (f == 1)  sets out = x + y 
        // if (f == 0)  sets out = x & y 
        Add16(a =OutNx , b =OutNy , out =XaddY );
        And16(a=OutNx , b=OutNy , out=XandY );
        Mux16(a=XandY , b=XaddY , sel=f , out=outF );

        // if (no == 1) sets out = !out 
        Not16(in=outF , out=notOutF );
        Mux16(a=outF , b=notOutF , sel=no , out=tempOut, out=out );
        Not16(in=tempOut , out[15]=signBit, out[0..7]=leftOut, out[8..15]=rightOut );

        //zr: if (out == 0) equals 1, else 0
        Or8Way(in=leftOut , out= leftZR );
        Or8Way(in=rightOut , out= rightZR );
        Or(a=leftZR , b=rightZR , out=zr );

        //ng:  if (out < 0)  equals 1, else 0
        And(a=signBit , b=true , out=ng );


}